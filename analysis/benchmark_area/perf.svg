<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1526.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1509" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1509" > </text>
<g id="frames">
<g >
<title>__do_page_fault (2 samples, 0.22%)</title><rect x="20.3" y="165" width="2.6" height="15.0" fill="rgb(227,49,36)" rx="2" ry="2" />
<text  x="23.33" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;geos::geom::CoordinateSequence, std::default_delete&lt;geos::geom::CoordinateSequence&gt; &gt;::get (5 samples, 0.55%)</title><rect x="1144.8" y="1013" width="6.5" height="15.0" fill="rgb(250,198,54)" rx="2" ry="2" />
<text  x="1147.81" y="1023.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="613" width="24.6" height="15.0" fill="rgb(231,157,21)" rx="2" ry="2" />
<text  x="20.75" y="623.5" >s..</text>
</g>
<g >
<title>std::vector&lt;geos::geom::Coordinate, std::allocator&lt;geos::geom::Coordinate&gt; &gt;::operator[]@plt (18 samples, 1.97%)</title><rect x="1120.3" y="981" width="23.2" height="15.0" fill="rgb(225,56,21)" rx="2" ry="2" />
<text  x="1123.28" y="991.5" >s..</text>
</g>
<g >
<title>core::ptr::write (1 samples, 0.11%)</title><rect x="22.9" y="357" width="1.3" height="15.0" fill="rgb(228,70,48)" rx="2" ry="2" />
<text  x="25.91" y="367.5" ></text>
</g>
<g >
<title>GEOSArea_r (758 samples, 82.93%)</title><rect x="175.3" y="1109" width="978.6" height="15.0" fill="rgb(224,102,44)" rx="2" ry="2" />
<text  x="178.25" y="1119.5" >GEOSArea_r</text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 1.53%)</title><rect x="24.2" y="341" width="18.1" height="15.0" fill="rgb(231,174,48)" rx="2" ry="2" />
<text  x="27.20" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.11%)</title><rect x="44.9" y="885" width="1.2" height="15.0" fill="rgb(249,168,22)" rx="2" ry="2" />
<text  x="47.86" y="895.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="44.9" y="997" width="1.2" height="15.0" fill="rgb(218,225,52)" rx="2" ry="2" />
<text  x="47.86" y="1007.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h3a398a8154de3106 (882 samples, 96.50%)</title><rect x="15.2" y="1333" width="1138.7" height="15.0" fill="rgb(240,25,23)" rx="2" ry="2" />
<text  x="18.16" y="1343.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h3a398a8154de3106</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_to_string (2 samples, 0.22%)</title><rect x="43.6" y="1109" width="2.5" height="15.0" fill="rgb(238,2,39)" rx="2" ry="2" />
<text  x="46.57" y="1119.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.11%)</title><rect x="46.1" y="1013" width="1.3" height="15.0" fill="rgb(223,178,14)" rx="2" ry="2" />
<text  x="49.15" y="1023.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.11%)</title><rect x="16.5" y="901" width="1.2" height="15.0" fill="rgb(221,206,4)" rx="2" ry="2" />
<text  x="19.46" y="911.5" ></text>
</g>
<g >
<title>geojson::geometry::Geometry::from_json_object (3 samples, 0.33%)</title><rect x="11.3" y="1205" width="3.9" height="15.0" fill="rgb(238,197,31)" rx="2" ry="2" />
<text  x="14.29" y="1215.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="981" width="1.3" height="15.0" fill="rgb(242,176,3)" rx="2" ry="2" />
<text  x="18.16" y="991.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.11%)</title><rect x="43.6" y="805" width="1.3" height="15.0" fill="rgb(222,208,12)" rx="2" ry="2" />
<text  x="46.57" y="815.5" ></text>
</g>
<g >
<title>move_vma (1 samples, 0.11%)</title><rect x="44.9" y="789" width="1.2" height="15.0" fill="rgb(211,217,29)" rx="2" ry="2" />
<text  x="47.86" y="799.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, geos::geom::CoordinateSequence*, std::default_delete&lt;geos::geom::CoordinateSequence&gt; &gt; (1 samples, 0.11%)</title><rect x="1150.0" y="965" width="1.3" height="15.0" fill="rgb(229,96,22)" rx="2" ry="2" />
<text  x="1152.98" y="975.5" ></text>
</g>
<g >
<title>__x64_sys_mremap (1 samples, 0.11%)</title><rect x="44.9" y="805" width="1.2" height="15.0" fill="rgb(225,169,4)" rx="2" ry="2" />
<text  x="47.86" y="815.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.11%)</title><rect x="22.9" y="309" width="1.3" height="15.0" fill="rgb(228,142,10)" rx="2" ry="2" />
<text  x="25.91" y="319.5" ></text>
</g>
<g >
<title>geojson::util::expect_property (1 samples, 0.11%)</title><rect x="16.5" y="981" width="1.2" height="15.0" fill="rgb(213,29,29)" rx="2" ry="2" />
<text  x="19.46" y="991.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (882 samples, 96.50%)</title><rect x="15.2" y="1381" width="1138.7" height="15.0" fill="rgb(230,92,52)" rx="2" ry="2" />
<text  x="18.16" y="1391.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19 samples, 2.08%)</title><rect x="17.7" y="485" width="24.6" height="15.0" fill="rgb(249,91,36)" rx="2" ry="2" />
<text  x="20.75" y="495.5" >&lt;..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;geojson::feature_collection::FeatureCollection&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1109" width="1.3" height="15.0" fill="rgb(222,164,51)" rx="2" ry="2" />
<text  x="18.16" y="1119.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.33%)</title><rect x="28.1" y="53" width="3.8" height="15.0" fill="rgb(231,175,30)" rx="2" ry="2" />
<text  x="31.07" y="63.5" ></text>
</g>
<g >
<title>harness::notsofine::benchmark_run (858 samples, 93.87%)</title><rect x="46.1" y="1189" width="1107.8" height="15.0" fill="rgb(240,58,22)" rx="2" ry="2" />
<text  x="49.15" y="1199.5" >harness::notsofine::benchmark_run</text>
</g>
<g >
<title>&lt;geo_types::line::Line&lt;T&gt; as geo::algorithm::map_coords::MapCoords&lt;T,NT&gt;&gt;::map_coords (19 samples, 2.08%)</title><rect x="112.0" y="1029" width="24.5" height="15.0" fill="rgb(218,161,21)" rx="2" ry="2" />
<text  x="114.99" y="1039.5" >&lt;..</text>
</g>
<g >
<title>geo::algorithm::area::twice_signed_ring_area::_$u7b$$u7b$closure$u7d$$u7d$::hac06ea9fa53ccbc4 (19 samples, 2.08%)</title><rect x="112.0" y="997" width="24.5" height="15.0" fill="rgb(251,208,48)" rx="2" ry="2" />
<text  x="114.99" y="1007.5" >g..</text>
</g>
<g >
<title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 5.47%)</title><rect x="47.4" y="1029" width="64.6" height="15.0" fill="rgb(215,105,42)" rx="2" ry="2" />
<text  x="50.44" y="1039.5" >&lt;core::..</text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.55%)</title><rect x="34.5" y="245" width="6.5" height="15.0" fill="rgb(234,84,1)" rx="2" ry="2" />
<text  x="37.53" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.11%)</title><rect x="174.0" y="1045" width="1.3" height="15.0" fill="rgb(226,11,46)" rx="2" ry="2" />
<text  x="176.96" y="1055.5" ></text>
</g>
<g >
<title>geo::algorithm::area::twice_signed_ring_area (98 samples, 10.72%)</title><rect x="47.4" y="1045" width="126.6" height="15.0" fill="rgb(207,226,35)" rx="2" ry="2" />
<text  x="50.44" y="1055.5" >geo::algorithm:..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (28 samples, 3.06%)</title><rect x="75.8" y="997" width="36.2" height="15.0" fill="rgb(209,129,10)" rx="2" ry="2" />
<text  x="78.84" y="1007.5" >cor..</text>
</g>
<g >
<title>geozero::geojson::geojson_reader::process_coord (1 samples, 0.11%)</title><rect x="42.3" y="1045" width="1.3" height="15.0" fill="rgb(209,158,12)" rx="2" ry="2" />
<text  x="45.28" y="1055.5" ></text>
</g>
<g >
<title>geozero::geojson::geojson_reader::process_polygon (1 samples, 0.11%)</title><rect x="42.3" y="1077" width="1.3" height="15.0" fill="rgb(237,223,20)" rx="2" ry="2" />
<text  x="45.28" y="1087.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry_seed (19 samples, 2.08%)</title><rect x="17.7" y="661" width="24.6" height="15.0" fill="rgb(216,145,27)" rx="2" ry="2" />
<text  x="20.75" y="671.5" >s..</text>
</g>
<g >
<title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (14 samples, 1.53%)</title><rect x="24.2" y="357" width="18.1" height="15.0" fill="rgb(247,155,53)" rx="2" ry="2" />
<text  x="27.20" y="367.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.11%)</title><rect x="21.6" y="85" width="1.3" height="15.0" fill="rgb(213,112,35)" rx="2" ry="2" />
<text  x="24.62" y="95.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (4 samples, 0.44%)</title><rect x="17.7" y="229" width="5.2" height="15.0" fill="rgb(224,69,7)" rx="2" ry="2" />
<text  x="20.75" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, geos::geom::CoordinateSequence*, std::default_delete&lt;geos::geom::CoordinateSequence&gt; &gt; (4 samples, 0.44%)</title><rect x="1146.1" y="981" width="5.2" height="15.0" fill="rgb(241,118,18)" rx="2" ry="2" />
<text  x="1149.11" y="991.5" ></text>
</g>
<g >
<title>geozero::geojson::geojson_reader::process_multi_polygon (1 samples, 0.11%)</title><rect x="42.3" y="1093" width="1.3" height="15.0" fill="rgb(217,148,20)" rx="2" ry="2" />
<text  x="45.28" y="1103.5" ></text>
</g>
<g >
<title>geojson::util::json_to_2d_positions (3 samples, 0.33%)</title><rect x="11.3" y="1125" width="3.9" height="15.0" fill="rgb(234,163,39)" rx="2" ry="2" />
<text  x="14.29" y="1135.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.44%)</title><rect x="17.7" y="277" width="5.2" height="15.0" fill="rgb(211,135,50)" rx="2" ry="2" />
<text  x="20.75" y="287.5" ></text>
</g>
<g >
<title>geo_types::line::Line&lt;T&gt;::determinant (29 samples, 3.17%)</title><rect x="136.5" y="1029" width="37.5" height="15.0" fill="rgb(212,110,54)" rx="2" ry="2" />
<text  x="139.52" y="1039.5" >geo..</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.11%)</title><rect x="43.6" y="709" width="1.3" height="15.0" fill="rgb(243,59,12)" rx="2" ry="2" />
<text  x="46.57" y="719.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.11%)</title><rect x="38.4" y="117" width="1.3" height="15.0" fill="rgb(238,10,51)" rx="2" ry="2" />
<text  x="41.40" y="127.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="405" width="24.6" height="15.0" fill="rgb(207,98,2)" rx="2" ry="2" />
<text  x="20.75" y="415.5" >&lt;..</text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 2.08%)</title><rect x="17.7" y="805" width="24.6" height="15.0" fill="rgb(216,79,49)" rx="2" ry="2" />
<text  x="20.75" y="815.5" >&lt;..</text>
</g>
<g >
<title>&lt;geojson::feature_collection::FeatureCollection as core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt;::try_from (1 samples, 0.11%)</title><rect x="16.5" y="1061" width="1.2" height="15.0" fill="rgb(251,25,9)" rx="2" ry="2" />
<text  x="19.46" y="1071.5" ></text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19 samples, 2.08%)</title><rect x="17.7" y="389" width="24.6" height="15.0" fill="rgb(238,70,36)" rx="2" ry="2" />
<text  x="20.75" y="399.5" >&lt;..</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="821" width="24.6" height="15.0" fill="rgb(236,81,2)" rx="2" ry="2" />
<text  x="20.75" y="831.5" >&lt;..</text>
</g>
<g >
<title>geozero::geojson::geojson_reader::process_geojson_geom_n (1 samples, 0.11%)</title><rect x="42.3" y="1109" width="1.3" height="15.0" fill="rgb(251,225,44)" rx="2" ry="2" />
<text  x="45.28" y="1119.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19 samples, 2.08%)</title><rect x="17.7" y="645" width="24.6" height="15.0" fill="rgb(248,78,47)" rx="2" ry="2" />
<text  x="20.75" y="655.5" >&lt;..</text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="533" width="24.6" height="15.0" fill="rgb(227,180,17)" rx="2" ry="2" />
<text  x="20.75" y="543.5" >&lt;..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="837" width="1.3" height="15.0" fill="rgb(224,186,25)" rx="2" ry="2" />
<text  x="18.16" y="847.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.44%)</title><rect x="17.7" y="341" width="5.2" height="15.0" fill="rgb(245,28,2)" rx="2" ry="2" />
<text  x="20.75" y="351.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.55%)</title><rect x="34.5" y="213" width="6.5" height="15.0" fill="rgb(219,5,39)" rx="2" ry="2" />
<text  x="37.53" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="44.9" y="917" width="1.2" height="15.0" fill="rgb(221,10,49)" rx="2" ry="2" />
<text  x="47.86" y="927.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt;]&gt; (1 samples, 0.11%)</title><rect x="15.2" y="949" width="1.3" height="15.0" fill="rgb(221,184,17)" rx="2" ry="2" />
<text  x="18.16" y="959.5" ></text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="741" width="24.6" height="15.0" fill="rgb(250,99,16)" rx="2" ry="2" />
<text  x="20.75" y="751.5" >&lt;..</text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="437" width="24.6" height="15.0" fill="rgb(240,170,24)" rx="2" ry="2" />
<text  x="20.75" y="447.5" >&lt;..</text>
</g>
<g >
<title>&lt;geojson::geometry::Geometry as core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt;::try_from (3 samples, 0.33%)</title><rect x="11.3" y="1189" width="3.9" height="15.0" fill="rgb(215,57,44)" rx="2" ry="2" />
<text  x="14.29" y="1199.5" ></text>
</g>
<g >
<title>geojson::util::get_features (1 samples, 0.11%)</title><rect x="16.5" y="1045" width="1.2" height="15.0" fill="rgb(222,216,51)" rx="2" ry="2" />
<text  x="19.46" y="1055.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.44%)</title><rect x="17.7" y="357" width="5.2" height="15.0" fill="rgb(249,138,49)" rx="2" ry="2" />
<text  x="20.75" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.11%)</title><rect x="17.7" y="165" width="1.3" height="15.0" fill="rgb(238,141,37)" rx="2" ry="2" />
<text  x="20.75" y="175.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.11%)</title><rect x="20.3" y="101" width="1.3" height="15.0" fill="rgb(210,3,20)" rx="2" ry="2" />
<text  x="23.33" y="111.5" ></text>
</g>
<g >
<title>geojson::util::get_geometry (3 samples, 0.33%)</title><rect x="11.3" y="1221" width="3.9" height="15.0" fill="rgb(250,8,4)" rx="2" ry="2" />
<text  x="14.29" y="1231.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;geojson::geometry::Value&gt; (1 samples, 0.11%)</title><rect x="15.2" y="997" width="1.3" height="15.0" fill="rgb(245,68,1)" rx="2" ry="2" />
<text  x="18.16" y="1007.5" ></text>
</g>
<g >
<title>GEOSArea_r::{lambda (1 samples, 0.11%)</title><rect x="10.0" y="1445" width="1.3" height="15.0" fill="rgb(251,223,12)" rx="2" ry="2" />
<text  x="13.00" y="1455.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (28 samples, 3.06%)</title><rect x="75.8" y="1013" width="36.2" height="15.0" fill="rgb(247,9,7)" rx="2" ry="2" />
<text  x="78.84" y="1023.5" >cor..</text>
</g>
<g >
<title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.11%)</title><rect x="39.7" y="165" width="1.3" height="15.0" fill="rgb(248,147,38)" rx="2" ry="2" />
<text  x="42.69" y="175.5" ></text>
</g>
<g >
<title>ksys_read (1 samples, 0.11%)</title><rect x="43.6" y="917" width="1.3" height="15.0" fill="rgb(228,167,25)" rx="2" ry="2" />
<text  x="46.57" y="927.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;[geojson::Feature]&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1061" width="1.3" height="15.0" fill="rgb(232,213,49)" rx="2" ry="2" />
<text  x="18.16" y="1071.5" ></text>
</g>
<g >
<title>std::panicking::try (882 samples, 96.50%)</title><rect x="15.2" y="1301" width="1138.7" height="15.0" fill="rgb(232,136,19)" rx="2" ry="2" />
<text  x="18.16" y="1311.5" >std::panicking::try</text>
</g>
<g >
<title>std::panicking::try (882 samples, 96.50%)</title><rect x="15.2" y="1365" width="1138.7" height="15.0" fill="rgb(213,200,52)" rx="2" ry="2" />
<text  x="18.16" y="1375.5" >std::panicking::try</text>
</g>
<g >
<title>serde_json::de::from_str (19 samples, 2.08%)</title><rect x="17.7" y="1077" width="24.6" height="15.0" fill="rgb(222,145,44)" rx="2" ry="2" />
<text  x="20.75" y="1087.5" >s..</text>
</g>
<g >
<title>std::io::append_to_string (2 samples, 0.22%)</title><rect x="43.6" y="1077" width="2.5" height="15.0" fill="rgb(245,7,26)" rx="2" ry="2" />
<text  x="46.57" y="1087.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (882 samples, 96.50%)</title><rect x="15.2" y="1285" width="1138.7" height="15.0" fill="rgb(208,44,53)" rx="2" ry="2" />
<text  x="18.16" y="1295.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>std::panic::catch_unwind (882 samples, 96.50%)</title><rect x="15.2" y="1317" width="1138.7" height="15.0" fill="rgb(207,46,5)" rx="2" ry="2" />
<text  x="18.16" y="1327.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>mremap_chunk (1 samples, 0.11%)</title><rect x="44.9" y="869" width="1.2" height="15.0" fill="rgb(206,153,31)" rx="2" ry="2" />
<text  x="47.86" y="879.5" ></text>
</g>
<g >
<title>harness::data::load_multipolygon (24 samples, 2.63%)</title><rect x="15.2" y="1173" width="30.9" height="15.0" fill="rgb(210,148,52)" rx="2" ry="2" />
<text  x="18.16" y="1183.5" >ha..</text>
</g>
<g >
<title>harness::data::load_multipolygon (3 samples, 0.33%)</title><rect x="11.3" y="1397" width="3.9" height="15.0" fill="rgb(214,219,26)" rx="2" ry="2" />
<text  x="14.29" y="1407.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry (19 samples, 2.08%)</title><rect x="17.7" y="677" width="24.6" height="15.0" fill="rgb(227,26,52)" rx="2" ry="2" />
<text  x="20.75" y="687.5" >s..</text>
</g>
<g >
<title>&lt;geojson::geojson::GeoJson as core::str::traits::FromStr&gt;::from_str (3 samples, 0.33%)</title><rect x="11.3" y="1333" width="3.9" height="15.0" fill="rgb(213,43,38)" rx="2" ry="2" />
<text  x="14.29" y="1343.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.11%)</title><rect x="43.6" y="773" width="1.3" height="15.0" fill="rgb(254,155,51)" rx="2" ry="2" />
<text  x="46.57" y="783.5" ></text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 2.08%)</title><rect x="17.7" y="1013" width="24.6" height="15.0" fill="rgb(252,12,34)" rx="2" ry="2" />
<text  x="20.75" y="1023.5" >&lt;..</text>
</g>
<g >
<title>geojson::feature::&lt;impl geojson::Feature&gt;::from_json_object (1 samples, 0.11%)</title><rect x="16.5" y="1029" width="1.2" height="15.0" fill="rgb(213,221,27)" rx="2" ry="2" />
<text  x="19.46" y="1039.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_to_string (2 samples, 0.22%)</title><rect x="43.6" y="1125" width="2.5" height="15.0" fill="rgb(217,36,5)" rx="2" ry="2" />
<text  x="46.57" y="1135.5" ></text>
</g>
<g >
<title>memcg_kmem_charge (1 samples, 0.11%)</title><rect x="44.9" y="709" width="1.2" height="15.0" fill="rgb(206,47,34)" rx="2" ry="2" />
<text  x="47.86" y="719.5" ></text>
</g>
<g >
<title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.11%)</title><rect x="16.5" y="869" width="1.2" height="15.0" fill="rgb(215,0,19)" rx="2" ry="2" />
<text  x="19.46" y="879.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold (100 samples, 10.94%)</title><rect x="46.1" y="1109" width="129.2" height="15.0" fill="rgb(214,117,13)" rx="2" ry="2" />
<text  x="49.15" y="1119.5" >core::iter::trai..</text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="725" width="24.6" height="15.0" fill="rgb(208,77,6)" rx="2" ry="2" />
<text  x="20.75" y="735.5" >s..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (882 samples, 96.50%)</title><rect x="15.2" y="1269" width="1138.7" height="15.0" fill="rgb(210,16,34)" rx="2" ry="2" />
<text  x="18.16" y="1279.5" >core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.55%)</title><rect x="25.5" y="213" width="6.4" height="15.0" fill="rgb(245,220,46)" rx="2" ry="2" />
<text  x="28.49" y="223.5" ></text>
</g>
<g >
<title>geos::geom::GeometryCollection::getArea (756 samples, 82.71%)</title><rect x="177.8" y="1061" width="976.1" height="15.0" fill="rgb(234,198,2)" rx="2" ry="2" />
<text  x="180.83" y="1071.5" >geos::geom::GeometryCollection::getArea</text>
</g>
<g >
<title>geojson::util::get_features (3 samples, 0.33%)</title><rect x="11.3" y="1269" width="3.9" height="15.0" fill="rgb(233,49,12)" rx="2" ry="2" />
<text  x="14.29" y="1279.5" ></text>
</g>
<g >
<title>serde_json::de::from_trait (19 samples, 2.08%)</title><rect x="17.7" y="1061" width="24.6" height="15.0" fill="rgb(220,22,5)" rx="2" ry="2" />
<text  x="20.75" y="1071.5" >s..</text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="629" width="24.6" height="15.0" fill="rgb(246,13,50)" rx="2" ry="2" />
<text  x="20.75" y="639.5" >&lt;..</text>
</g>
<g >
<title>page_fault (1 samples, 0.11%)</title><rect x="17.7" y="181" width="1.3" height="15.0" fill="rgb(219,75,16)" rx="2" ry="2" />
<text  x="20.75" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;geos::geom::Geometry, std::default_delete&lt;geos::geom::Geometry&gt; &gt; const*, std::vector&lt;std::unique_ptr&lt;geos::geom::Geometry, std::default_delete&lt;geos::geom::Geometry&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;geos::geom::Geometry, std::default_delete&lt;geos::geom::Geometry&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.11%)</title><rect x="1152.6" y="1029" width="1.3" height="15.0" fill="rgb(216,137,21)" rx="2" ry="2" />
<text  x="1155.56" y="1039.5" ></text>
</g>
<g >
<title>execute&lt;GEOSArea_r::{lambda (758 samples, 82.93%)</title><rect x="175.3" y="1093" width="978.6" height="15.0" fill="rgb(231,23,25)" rx="2" ry="2" />
<text  x="178.25" y="1103.5" >execute&lt;GEOSArea_r::{lambda</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="43.6" y="949" width="1.3" height="15.0" fill="rgb(239,51,0)" rx="2" ry="2" />
<text  x="46.57" y="959.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry (19 samples, 2.08%)</title><rect x="17.7" y="997" width="24.6" height="15.0" fill="rgb(248,62,21)" rx="2" ry="2" />
<text  x="20.75" y="1007.5" >s..</text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.11%)</title><rect x="41.0" y="229" width="1.3" height="15.0" fill="rgb(218,210,51)" rx="2" ry="2" />
<text  x="43.98" y="239.5" ></text>
</g>
<g >
<title>serde::de::SeqAccess::next_element (19 samples, 2.08%)</title><rect x="17.7" y="885" width="24.6" height="15.0" fill="rgb(219,4,16)" rx="2" ry="2" />
<text  x="20.75" y="895.5" >s..</text>
</g>
<g >
<title>geojson::feature::&lt;impl core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; for geojson::Feature&gt;::try_from (1 samples, 0.11%)</title><rect x="16.5" y="1013" width="1.2" height="15.0" fill="rgb(243,112,50)" rx="2" ry="2" />
<text  x="19.46" y="1023.5" ></text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="949" width="24.6" height="15.0" fill="rgb(253,7,2)" rx="2" ry="2" />
<text  x="20.75" y="959.5" >&lt;..</text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (882 samples, 96.50%)</title><rect x="15.2" y="1221" width="1138.7" height="15.0" fill="rgb(243,220,49)" rx="2" ry="2" />
<text  x="18.16" y="1231.5" >core::ops::function::FnOnce::call_once</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;]&gt; (1 samples, 0.11%)</title><rect x="15.2" y="901" width="1.3" height="15.0" fill="rgb(215,87,52)" rx="2" ry="2" />
<text  x="18.16" y="911.5" ></text>
</g>
<g >
<title>geojson::feature::&lt;impl geojson::Feature&gt;::from_json_object (3 samples, 0.33%)</title><rect x="11.3" y="1253" width="3.9" height="15.0" fill="rgb(252,64,5)" rx="2" ry="2" />
<text  x="14.29" y="1263.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.11%)</title><rect x="16.5" y="821" width="1.2" height="15.0" fill="rgb(249,69,35)" rx="2" ry="2" />
<text  x="19.46" y="831.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.44%)</title><rect x="26.8" y="101" width="5.1" height="15.0" fill="rgb(226,81,54)" rx="2" ry="2" />
<text  x="29.78" y="111.5" ></text>
</g>
<g >
<title>std::io::read_to_end_with_reservation (2 samples, 0.22%)</title><rect x="43.6" y="1029" width="2.5" height="15.0" fill="rgb(214,177,50)" rx="2" ry="2" />
<text  x="46.57" y="1039.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.11%)</title><rect x="20.3" y="85" width="1.3" height="15.0" fill="rgb(215,99,45)" rx="2" ry="2" />
<text  x="23.33" y="95.5" ></text>
</g>
<g >
<title>geos::geom::CoordinateArraySequence::getAt (186 samples, 20.35%)</title><rect x="903.4" y="997" width="240.1" height="15.0" fill="rgb(230,215,45)" rx="2" ry="2" />
<text  x="906.39" y="1007.5" >geos::geom::CoordinateArraySequ..</text>
</g>
<g >
<title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="15.2" y="805" width="1.3" height="15.0" fill="rgb(214,93,6)" rx="2" ry="2" />
<text  x="18.16" y="815.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.11%)</title><rect x="43.6" y="725" width="1.3" height="15.0" fill="rgb(230,147,45)" rx="2" ry="2" />
<text  x="46.57" y="735.5" ></text>
</g>
<g >
<title>serde_json::number::Number::as_f64 (2 samples, 0.22%)</title><rect x="12.6" y="1045" width="2.6" height="15.0" fill="rgb(238,6,51)" rx="2" ry="2" />
<text  x="15.58" y="1055.5" ></text>
</g>
<g >
<title>geos::geom::Coordinate::Coordinate (1 samples, 0.11%)</title><rect x="902.1" y="997" width="1.3" height="15.0" fill="rgb(234,145,36)" rx="2" ry="2" />
<text  x="905.10" y="1007.5" ></text>
</g>
<g >
<title>_$LT$geo_types..multi_polygon..MultiPolygon$LT$T$GT$$u20$as$u20$geo..algorithm..area..Area$LT$T$GT$$GT$::signed_area::_$u7b$$u7b$closure$u7d$$u7d$::h7499759712fc2893 (100 samples, 10.94%)</title><rect x="46.1" y="1093" width="129.2" height="15.0" fill="rgb(227,37,26)" rx="2" ry="2" />
<text  x="49.15" y="1103.5" >_$LT$geo_types....</text>
</g>
<g >
<title>std::io::Read::read_to_string (2 samples, 0.22%)</title><rect x="43.6" y="1093" width="2.5" height="15.0" fill="rgb(213,8,36)" rx="2" ry="2" />
<text  x="46.57" y="1103.5" ></text>
</g>
<g >
<title>&lt;geojson::geojson::GeoJson as core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt;::try_from (1 samples, 0.11%)</title><rect x="16.5" y="1077" width="1.2" height="15.0" fill="rgb(247,174,8)" rx="2" ry="2" />
<text  x="19.46" y="1087.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 2.08%)</title><rect x="17.7" y="453" width="24.6" height="15.0" fill="rgb(243,62,0)" rx="2" ry="2" />
<text  x="20.75" y="463.5" >&lt;..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.55%)</title><rect x="25.5" y="277" width="6.4" height="15.0" fill="rgb(216,15,2)" rx="2" ry="2" />
<text  x="28.49" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.11%)</title><rect x="43.6" y="933" width="1.3" height="15.0" fill="rgb(230,106,47)" rx="2" ry="2" />
<text  x="46.57" y="943.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::grow_impl (4 samples, 0.44%)</title><rect x="17.7" y="261" width="5.2" height="15.0" fill="rgb(215,2,39)" rx="2" ry="2" />
<text  x="20.75" y="271.5" ></text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="853" width="24.6" height="15.0" fill="rgb(253,136,48)" rx="2" ry="2" />
<text  x="20.75" y="863.5" >&lt;..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;geojson::Feature&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1093" width="1.3" height="15.0" fill="rgb(251,30,37)" rx="2" ry="2" />
<text  x="18.16" y="1103.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc (4 samples, 0.44%)</title><rect x="17.7" y="245" width="5.2" height="15.0" fill="rgb(251,180,26)" rx="2" ry="2" />
<text  x="20.75" y="255.5" ></text>
</g>
<g >
<title>&lt;geos::geometry::Geometry as geos::geometry::Geom&gt;::area (758 samples, 82.93%)</title><rect x="175.3" y="1125" width="978.6" height="15.0" fill="rgb(245,129,45)" rx="2" ry="2" />
<text  x="178.25" y="1135.5" >&lt;geos::geometry::Geometry as geos::geometry::Geom&gt;::area</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.44%)</title><rect x="17.7" y="309" width="5.2" height="15.0" fill="rgb(247,46,30)" rx="2" ry="2" />
<text  x="20.75" y="319.5" ></text>
</g>
<g >
<title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="44.9" y="949" width="1.2" height="15.0" fill="rgb(240,105,35)" rx="2" ry="2" />
<text  x="47.86" y="959.5" ></text>
</g>
<g >
<title>__pte_alloc (1 samples, 0.11%)</title><rect x="44.9" y="757" width="1.2" height="15.0" fill="rgb(225,94,48)" rx="2" ry="2" />
<text  x="47.86" y="767.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.11%)</title><rect x="38.4" y="133" width="1.3" height="15.0" fill="rgb(210,119,1)" rx="2" ry="2" />
<text  x="41.40" y="143.5" ></text>
</g>
<g >
<title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.11%)</title><rect x="16.5" y="837" width="1.2" height="15.0" fill="rgb(254,10,6)" rx="2" ry="2" />
<text  x="19.46" y="847.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.33%)</title><rect x="28.1" y="69" width="3.8" height="15.0" fill="rgb(247,99,12)" rx="2" ry="2" />
<text  x="31.07" y="79.5" ></text>
</g>
<g >
<title>main (882 samples, 96.50%)</title><rect x="15.2" y="1413" width="1138.7" height="15.0" fill="rgb(206,187,31)" rx="2" ry="2" />
<text  x="18.16" y="1423.5" >main</text>
</g>
<g >
<title>alloc::raw_vec::finish_grow (5 samples, 0.55%)</title><rect x="25.5" y="197" width="6.4" height="15.0" fill="rgb(212,144,19)" rx="2" ry="2" />
<text  x="28.49" y="207.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="15.2" y="869" width="1.3" height="15.0" fill="rgb(232,21,43)" rx="2" ry="2" />
<text  x="18.16" y="879.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="15.2" y="1077" width="1.3" height="15.0" fill="rgb(226,220,35)" rx="2" ry="2" />
<text  x="18.16" y="1087.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.11%)</title><rect x="39.7" y="181" width="1.3" height="15.0" fill="rgb(216,67,38)" rx="2" ry="2" />
<text  x="42.69" y="191.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (3 samples, 0.33%)</title><rect x="35.8" y="149" width="3.9" height="15.0" fill="rgb(208,96,17)" rx="2" ry="2" />
<text  x="38.82" y="159.5" ></text>
</g>
<g >
<title>generic_file_read_iter (1 samples, 0.11%)</title><rect x="43.6" y="869" width="1.3" height="15.0" fill="rgb(236,65,53)" rx="2" ry="2" />
<text  x="46.57" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;geos::geom::Geometry, std::default_delete&lt;geos::geom::Geometry&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;geos::geom::Geometry, std::default_delete&lt;geos::geom::Geometry&gt; &gt; &gt; &gt;::end (1 samples, 0.11%)</title><rect x="1152.6" y="1045" width="1.3" height="15.0" fill="rgb(215,159,20)" rx="2" ry="2" />
<text  x="1155.56" y="1055.5" ></text>
</g>
<g >
<title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::remove (1 samples, 0.11%)</title><rect x="16.5" y="965" width="1.2" height="15.0" fill="rgb(231,208,32)" rx="2" ry="2" />
<text  x="19.46" y="975.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.88%)</title><rect x="31.9" y="261" width="10.4" height="15.0" fill="rgb(231,159,17)" rx="2" ry="2" />
<text  x="34.95" y="271.5" ></text>
</g>
<g >
<title>page_fault (4 samples, 0.44%)</title><rect x="26.8" y="149" width="5.1" height="15.0" fill="rgb(245,53,0)" rx="2" ry="2" />
<text  x="29.78" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="15.2" y="789" width="1.3" height="15.0" fill="rgb(219,66,47)" rx="2" ry="2" />
<text  x="18.16" y="799.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.55%)</title><rect x="25.5" y="245" width="6.4" height="15.0" fill="rgb(234,204,49)" rx="2" ry="2" />
<text  x="28.49" y="255.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.44%)</title><rect x="26.8" y="133" width="5.1" height="15.0" fill="rgb(253,17,16)" rx="2" ry="2" />
<text  x="29.78" y="143.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.11%)</title><rect x="46.1" y="1045" width="1.3" height="15.0" fill="rgb(205,220,51)" rx="2" ry="2" />
<text  x="49.15" y="1055.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="421" width="24.6" height="15.0" fill="rgb(221,227,16)" rx="2" ry="2" />
<text  x="20.75" y="431.5" >s..</text>
</g>
<g >
<title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 2.08%)</title><rect x="17.7" y="869" width="24.6" height="15.0" fill="rgb(240,57,21)" rx="2" ry="2" />
<text  x="20.75" y="879.5" >&lt;..</text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.11%)</title><rect x="43.6" y="789" width="1.3" height="15.0" fill="rgb(224,168,26)" rx="2" ry="2" />
<text  x="46.57" y="799.5" ></text>
</g>
<g >
<title>geo::algorithm::area::get_linestring_area (98 samples, 10.72%)</title><rect x="47.4" y="1061" width="126.6" height="15.0" fill="rgb(249,188,9)" rx="2" ry="2" />
<text  x="50.44" y="1071.5" >geo::algorithm:..</text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (3 samples, 0.33%)</title><rect x="35.8" y="197" width="3.9" height="15.0" fill="rgb(212,59,5)" rx="2" ry="2" />
<text  x="38.82" y="207.5" ></text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::parse (3 samples, 0.33%)</title><rect x="11.3" y="1349" width="3.9" height="15.0" fill="rgb(232,107,36)" rx="2" ry="2" />
<text  x="14.29" y="1359.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="837" width="24.6" height="15.0" fill="rgb(230,186,13)" rx="2" ry="2" />
<text  x="20.75" y="847.5" >s..</text>
</g>
<g >
<title>_start (882 samples, 96.50%)</title><rect x="15.2" y="1445" width="1138.7" height="15.0" fill="rgb(247,111,39)" rx="2" ry="2" />
<text  x="18.16" y="1455.5" >_start</text>
</g>
<g >
<title>benchmark_area::main (882 samples, 96.50%)</title><rect x="15.2" y="1205" width="1138.7" height="15.0" fill="rgb(225,27,19)" rx="2" ry="2" />
<text  x="18.16" y="1215.5" >benchmark_area::main</text>
</g>
<g >
<title>serde_json::value::Value::as_f64 (2 samples, 0.22%)</title><rect x="12.6" y="1061" width="2.6" height="15.0" fill="rgb(224,78,10)" rx="2" ry="2" />
<text  x="15.58" y="1071.5" ></text>
</g>
<g >
<title>std::vector&lt;geos::geom::Coordinate, std::allocator&lt;geos::geom::Coordinate&gt; &gt;::operator[] (100 samples, 10.94%)</title><rect x="991.2" y="981" width="129.1" height="15.0" fill="rgb(222,183,11)" rx="2" ry="2" />
<text  x="994.18" y="991.5" >std::vector&lt;geos..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;geos::geom::CoordinateSequence, std::default_delete&lt;geos::geom::CoordinateSequence&gt; &gt;::_M_ptr (5 samples, 0.55%)</title><rect x="1144.8" y="997" width="6.5" height="15.0" fill="rgb(231,33,41)" rx="2" ry="2" />
<text  x="1147.81" y="1007.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (882 samples, 96.50%)</title><rect x="15.2" y="1237" width="1138.7" height="15.0" fill="rgb(249,64,34)" rx="2" ry="2" />
<text  x="18.16" y="1247.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="15.2" y="917" width="1.3" height="15.0" fill="rgb(219,126,52)" rx="2" ry="2" />
<text  x="18.16" y="927.5" ></text>
</g>
<g >
<title>&lt;geojson::feature_collection::FeatureCollection as core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt;::try_from (3 samples, 0.33%)</title><rect x="11.3" y="1285" width="3.9" height="15.0" fill="rgb(227,226,38)" rx="2" ry="2" />
<text  x="14.29" y="1295.5" ></text>
</g>
<g >
<title>&lt;f64 as core::ops::arith::Sub&gt;::sub (19 samples, 2.08%)</title><rect x="112.0" y="981" width="24.5" height="15.0" fill="rgb(233,55,41)" rx="2" ry="2" />
<text  x="114.99" y="991.5" >&lt;..</text>
</g>
<g >
<title>copyout (1 samples, 0.11%)</title><rect x="43.6" y="837" width="1.3" height="15.0" fill="rgb(246,7,45)" rx="2" ry="2" />
<text  x="46.57" y="847.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;f64&gt;]&gt; (1 samples, 0.11%)</title><rect x="15.2" y="853" width="1.3" height="15.0" fill="rgb(210,12,49)" rx="2" ry="2" />
<text  x="18.16" y="863.5" ></text>
</g>
<g >
<title>harness::notsofine::run_once (858 samples, 93.87%)</title><rect x="46.1" y="1173" width="1107.8" height="15.0" fill="rgb(222,214,27)" rx="2" ry="2" />
<text  x="49.15" y="1183.5" >harness::notsofine::run_once</text>
</g>
<g >
<title>geojson::util::expect_f64 (3 samples, 0.33%)</title><rect x="11.3" y="1077" width="3.9" height="15.0" fill="rgb(206,34,13)" rx="2" ry="2" />
<text  x="14.29" y="1087.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.11%)</title><rect x="22.9" y="293" width="1.3" height="15.0" fill="rgb(227,79,38)" rx="2" ry="2" />
<text  x="25.91" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="44.9" y="965" width="1.2" height="15.0" fill="rgb(221,203,9)" rx="2" ry="2" />
<text  x="47.86" y="975.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19 samples, 2.08%)</title><rect x="17.7" y="757" width="24.6" height="15.0" fill="rgb(219,6,20)" rx="2" ry="2" />
<text  x="20.75" y="767.5" >&lt;..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="821" width="1.3" height="15.0" fill="rgb(228,70,39)" rx="2" ry="2" />
<text  x="18.16" y="831.5" ></text>
</g>
<g >
<title>geojson::util::get_value (3 samples, 0.33%)</title><rect x="11.3" y="1173" width="3.9" height="15.0" fill="rgb(225,83,46)" rx="2" ry="2" />
<text  x="14.29" y="1183.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.11%)</title><rect x="20.3" y="117" width="1.3" height="15.0" fill="rgb(211,127,24)" rx="2" ry="2" />
<text  x="23.33" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.11%)</title><rect x="44.9" y="821" width="1.2" height="15.0" fill="rgb(215,194,28)" rx="2" ry="2" />
<text  x="47.86" y="831.5" ></text>
</g>
<g >
<title>geos::geom::LineString::getCoordinatesRO (1 samples, 0.11%)</title><rect x="1187.4" y="1429" width="1.3" height="15.0" fill="rgb(205,169,31)" rx="2" ry="2" />
<text  x="1190.42" y="1439.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry_seed (19 samples, 2.08%)</title><rect x="17.7" y="981" width="24.6" height="15.0" fill="rgb(212,27,27)" rx="2" ry="2" />
<text  x="20.75" y="991.5" >s..</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="597" width="24.6" height="15.0" fill="rgb(252,208,13)" rx="2" ry="2" />
<text  x="20.75" y="607.5" >&lt;..</text>
</g>
<g >
<title>serde::de::SeqAccess::next_element (19 samples, 2.08%)</title><rect x="17.7" y="469" width="24.6" height="15.0" fill="rgb(205,151,1)" rx="2" ry="2" />
<text  x="20.75" y="479.5" >s..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="17.7" y="197" width="1.3" height="15.0" fill="rgb(248,20,27)" rx="2" ry="2" />
<text  x="20.75" y="207.5" ></text>
</g>
<g >
<title>GEOSArea_r::{lambda (757 samples, 82.82%)</title><rect x="176.5" y="1077" width="977.4" height="15.0" fill="rgb(215,43,9)" rx="2" ry="2" />
<text  x="179.54" y="1087.5" >GEOSArea_r::{lambda</text>
</g>
<g >
<title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.11%)</title><rect x="38.4" y="101" width="1.3" height="15.0" fill="rgb(205,164,47)" rx="2" ry="2" />
<text  x="41.40" y="111.5" ></text>
</g>
<g >
<title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.11%)</title><rect x="16.5" y="853" width="1.2" height="15.0" fill="rgb(220,61,9)" rx="2" ry="2" />
<text  x="19.46" y="863.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="517" width="24.6" height="15.0" fill="rgb(249,103,24)" rx="2" ry="2" />
<text  x="20.75" y="527.5" >s..</text>
</g>
<g >
<title>geojson::geojson::GeoJson::from_json_object (1 samples, 0.11%)</title><rect x="16.5" y="1093" width="1.2" height="15.0" fill="rgb(247,140,45)" rx="2" ry="2" />
<text  x="19.46" y="1103.5" ></text>
</g>
<g >
<title>move_page_tables (1 samples, 0.11%)</title><rect x="44.9" y="773" width="1.2" height="15.0" fill="rgb(254,33,42)" rx="2" ry="2" />
<text  x="47.86" y="783.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1 samples, 0.11%)</title><rect x="43.6" y="853" width="1.3" height="15.0" fill="rgb(251,200,22)" rx="2" ry="2" />
<text  x="46.57" y="863.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="917" width="24.6" height="15.0" fill="rgb(221,166,45)" rx="2" ry="2" />
<text  x="20.75" y="927.5" >&lt;..</text>
</g>
<g >
<title>geos::algorithm::Area::ofRingSigned (747 samples, 81.73%)</title><rect x="179.1" y="1013" width="964.4" height="15.0" fill="rgb(248,173,26)" rx="2" ry="2" />
<text  x="182.12" y="1023.5" >geos::algorithm::Area::ofRingSigned</text>
</g>
<g >
<title>&lt;geozero::geojson::geojson_reader::GeoJsonReader&lt;R&gt; as geozero::api::GeozeroDatasource&gt;::process (3 samples, 0.33%)</title><rect x="11.3" y="1381" width="3.9" height="15.0" fill="rgb(213,34,4)" rx="2" ry="2" />
<text  x="14.29" y="1391.5" ></text>
</g>
<g >
<title>all (914 samples, 100%)</title><rect x="10.0" y="1477" width="1180.0" height="15.0" fill="rgb(208,104,1)" rx="2" ry="2" />
<text  x="13.00" y="1487.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (1 samples, 0.11%)</title><rect x="43.6" y="981" width="1.3" height="15.0" fill="rgb(239,32,50)" rx="2" ry="2" />
<text  x="46.57" y="991.5" ></text>
</g>
<g >
<title>geos::geom::CoordinateArraySequence::getAt (26 samples, 2.84%)</title><rect x="1153.9" y="1429" width="33.5" height="15.0" fill="rgb(217,149,43)" rx="2" ry="2" />
<text  x="1156.85" y="1439.5" >ge..</text>
</g>
<g >
<title>geojson::geojson::GeoJson::from_json_object (3 samples, 0.33%)</title><rect x="11.3" y="1317" width="3.9" height="15.0" fill="rgb(226,180,48)" rx="2" ry="2" />
<text  x="14.29" y="1327.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry_seed (19 samples, 2.08%)</title><rect x="17.7" y="773" width="24.6" height="15.0" fill="rgb(233,112,7)" rx="2" ry="2" />
<text  x="20.75" y="783.5" >s..</text>
</g>
<g >
<title>geos::geom::GeometryCollection::getArea (1 samples, 0.11%)</title><rect x="10.0" y="1429" width="1.3" height="15.0" fill="rgb(205,155,44)" rx="2" ry="2" />
<text  x="13.00" y="1439.5" ></text>
</g>
<g >
<title>&lt;core::slice::iter::Windows&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 2.41%)</title><rect x="47.4" y="1013" width="28.4" height="15.0" fill="rgb(213,4,2)" rx="2" ry="2" />
<text  x="50.44" y="1023.5" >&lt;c..</text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="1045" width="24.6" height="15.0" fill="rgb(235,72,38)" rx="2" ry="2" />
<text  x="20.75" y="1055.5" >s..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.11%)</title><rect x="43.6" y="757" width="1.3" height="15.0" fill="rgb(232,117,20)" rx="2" ry="2" />
<text  x="46.57" y="767.5" ></text>
</g>
<g >
<title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.11%)</title><rect x="41.0" y="213" width="1.3" height="15.0" fill="rgb(236,113,1)" rx="2" ry="2" />
<text  x="43.98" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (3 samples, 0.33%)</title><rect x="19.0" y="197" width="3.9" height="15.0" fill="rgb(213,176,16)" rx="2" ry="2" />
<text  x="22.04" y="207.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.55%)</title><rect x="34.5" y="229" width="6.5" height="15.0" fill="rgb(237,217,19)" rx="2" ry="2" />
<text  x="37.53" y="239.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hb81c48af7c381c7e (882 samples, 96.50%)</title><rect x="15.2" y="1253" width="1138.7" height="15.0" fill="rgb(215,110,14)" rx="2" ry="2" />
<text  x="18.16" y="1263.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hb81c48af7c381c7e</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.55%)</title><rect x="25.5" y="261" width="6.4" height="15.0" fill="rgb(248,63,45)" rx="2" ry="2" />
<text  x="28.49" y="271.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove_entry (1 samples, 0.11%)</title><rect x="16.5" y="933" width="1.2" height="15.0" fill="rgb(245,220,46)" rx="2" ry="2" />
<text  x="19.46" y="943.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="1029" width="24.6" height="15.0" fill="rgb(210,217,2)" rx="2" ry="2" />
<text  x="20.75" y="1039.5" >&lt;..</text>
</g>
<g >
<title>geojson::feature::&lt;impl core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; for geojson::Feature&gt;::try_from (3 samples, 0.33%)</title><rect x="11.3" y="1237" width="3.9" height="15.0" fill="rgb(220,3,43)" rx="2" ry="2" />
<text  x="14.29" y="1247.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::parse_number (3 samples, 0.33%)</title><rect x="35.8" y="165" width="3.9" height="15.0" fill="rgb(205,51,35)" rx="2" ry="2" />
<text  x="38.82" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (1 samples, 0.11%)</title><rect x="16.5" y="949" width="1.2" height="15.0" fill="rgb(238,127,23)" rx="2" ry="2" />
<text  x="19.46" y="959.5" ></text>
</g>
<g >
<title>_int_malloc (5 samples, 0.55%)</title><rect x="25.5" y="165" width="6.4" height="15.0" fill="rgb(239,181,17)" rx="2" ry="2" />
<text  x="28.49" y="175.5" ></text>
</g>
<g >
<title>geo_types::polygon::Polygon&lt;T&gt;::interiors (1 samples, 0.11%)</title><rect x="174.0" y="1061" width="1.3" height="15.0" fill="rgb(227,156,2)" rx="2" ry="2" />
<text  x="176.96" y="1071.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.44%)</title><rect x="17.7" y="325" width="5.2" height="15.0" fill="rgb(248,137,38)" rx="2" ry="2" />
<text  x="20.75" y="335.5" ></text>
</g>
<g >
<title>std::io::Read::read_to_string::_$u7b$$u7b$closure$u7d$$u7d$::hace5fe1ab9e3c1a8 (2 samples, 0.22%)</title><rect x="43.6" y="1061" width="2.5" height="15.0" fill="rgb(249,105,8)" rx="2" ry="2" />
<text  x="46.57" y="1071.5" ></text>
</g>
<g >
<title>geojson::util::json_to_3d_positions (3 samples, 0.33%)</title><rect x="11.3" y="1141" width="3.9" height="15.0" fill="rgb(246,43,41)" rx="2" ry="2" />
<text  x="14.29" y="1151.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="44.9" y="837" width="1.2" height="15.0" fill="rgb(233,185,14)" rx="2" ry="2" />
<text  x="47.86" y="847.5" ></text>
</g>
<g >
<title>serde::de::SeqAccess::next_element (19 samples, 2.08%)</title><rect x="17.7" y="565" width="24.6" height="15.0" fill="rgb(234,218,5)" rx="2" ry="2" />
<text  x="20.75" y="575.5" >s..</text>
</g>
<g >
<title>geozero::geojson::geojson_reader::read_geojson (3 samples, 0.33%)</title><rect x="11.3" y="1365" width="3.9" height="15.0" fill="rgb(207,179,35)" rx="2" ry="2" />
<text  x="14.29" y="1375.5" ></text>
</g>
<g >
<title>geos::geom::LineString::getCoordinatesRO (5 samples, 0.55%)</title><rect x="1144.8" y="1029" width="6.5" height="15.0" fill="rgb(240,30,40)" rx="2" ry="2" />
<text  x="1147.81" y="1039.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, geos::geom::LinearRing*, std::default_delete&lt;geos::geom::LinearRing&gt; &gt; (1 samples, 0.11%)</title><rect x="1188.7" y="1429" width="1.3" height="15.0" fill="rgb(245,51,0)" rx="2" ry="2" />
<text  x="1191.71" y="1439.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.11%)</title><rect x="44.9" y="725" width="1.2" height="15.0" fill="rgb(208,61,18)" rx="2" ry="2" />
<text  x="47.86" y="735.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.11%)</title><rect x="16.5" y="917" width="1.2" height="15.0" fill="rgb(227,105,23)" rx="2" ry="2" />
<text  x="19.46" y="927.5" ></text>
</g>
<g >
<title>geozero::geojson::geojson_reader::process_geojson (1 samples, 0.11%)</title><rect x="42.3" y="1125" width="1.3" height="15.0" fill="rgb(224,151,47)" rx="2" ry="2" />
<text  x="45.28" y="1135.5" ></text>
</g>
<g >
<title>&lt;geozero::geojson::geojson_reader::GeoJsonReader&lt;R&gt; as geozero::api::GeozeroDatasource&gt;::process (24 samples, 2.63%)</title><rect x="15.2" y="1157" width="30.9" height="15.0" fill="rgb(207,206,3)" rx="2" ry="2" />
<text  x="18.16" y="1167.5" >&lt;g..</text>
</g>
<g >
<title>&lt;f64 as core::ops::arith::Sub&gt;::sub (29 samples, 3.17%)</title><rect x="136.5" y="1013" width="37.5" height="15.0" fill="rgb(243,135,11)" rx="2" ry="2" />
<text  x="139.52" y="1023.5" >&lt;f6..</text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.11%)</title><rect x="17.7" y="101" width="1.3" height="15.0" fill="rgb(243,106,37)" rx="2" ry="2" />
<text  x="20.75" y="111.5" ></text>
</g>
<g >
<title>&lt;geo_types::polygon::Polygon&lt;T&gt; as geo::algorithm::area::Area&lt;T&gt;&gt;::signed_area (100 samples, 10.94%)</title><rect x="46.1" y="1077" width="129.2" height="15.0" fill="rgb(232,45,43)" rx="2" ry="2" />
<text  x="49.15" y="1087.5" >&lt;geo_types::poly..</text>
</g>
<g >
<title>serde::de::SeqAccess::next_element (14 samples, 1.53%)</title><rect x="24.2" y="373" width="18.1" height="15.0" fill="rgb(213,125,35)" rx="2" ry="2" />
<text  x="27.20" y="383.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19 samples, 2.08%)</title><rect x="17.7" y="965" width="24.6" height="15.0" fill="rgb(221,71,3)" rx="2" ry="2" />
<text  x="20.75" y="975.5" >&lt;..</text>
</g>
<g >
<title>benchmark_area::geos_area (758 samples, 82.93%)</title><rect x="175.3" y="1141" width="978.6" height="15.0" fill="rgb(221,94,47)" rx="2" ry="2" />
<text  x="178.25" y="1151.5" >benchmark_area::geos_area</text>
</g>
<g >
<title>geojson::util::expect_type (1 samples, 0.11%)</title><rect x="16.5" y="997" width="1.2" height="15.0" fill="rgb(227,86,13)" rx="2" ry="2" />
<text  x="19.46" y="1007.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.22%)</title><rect x="20.3" y="181" width="2.6" height="15.0" fill="rgb(222,194,33)" rx="2" ry="2" />
<text  x="23.33" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.11%)</title><rect x="17.7" y="149" width="1.3" height="15.0" fill="rgb(219,61,26)" rx="2" ry="2" />
<text  x="20.75" y="159.5" ></text>
</g>
<g >
<title>&lt;harness::notsofine::simple::FnWithArgProgram&lt;T&gt; as harness::notsofine::PreparedProgram&gt;::benchmark_this (858 samples, 93.87%)</title><rect x="46.1" y="1157" width="1107.8" height="15.0" fill="rgb(215,40,21)" rx="2" ry="2" />
<text  x="49.15" y="1167.5" >&lt;harness::notsofine::simple::FnWithArgProgram&lt;T&gt; as harness::notsofine::PreparedProgram&gt;::benchmark_this</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="44.9" y="981" width="1.2" height="15.0" fill="rgb(221,77,19)" rx="2" ry="2" />
<text  x="47.86" y="991.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (3 samples, 0.33%)</title><rect x="35.8" y="181" width="3.9" height="15.0" fill="rgb(240,150,4)" rx="2" ry="2" />
<text  x="38.82" y="191.5" ></text>
</g>
<g >
<title>geo_types::line_string::LineString$LT$T$GT$::lines::_$u7b$$u7b$closure$u7d$$u7d$::h56776f40cf098343 (28 samples, 3.06%)</title><rect x="75.8" y="981" width="36.2" height="15.0" fill="rgb(206,90,28)" rx="2" ry="2" />
<text  x="78.84" y="991.5" >geo..</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.11%)</title><rect x="17.7" y="85" width="1.3" height="15.0" fill="rgb(240,200,25)" rx="2" ry="2" />
<text  x="20.75" y="95.5" ></text>
</g>
<g >
<title>geos::geom::Polygon::getArea (755 samples, 82.60%)</title><rect x="177.8" y="1045" width="974.8" height="15.0" fill="rgb(215,215,54)" rx="2" ry="2" />
<text  x="180.83" y="1055.5" >geos::geom::Polygon::getArea</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;core::option::Option&lt;geojson::geometry::Geometry&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1029" width="1.3" height="15.0" fill="rgb(251,86,13)" rx="2" ry="2" />
<text  x="18.16" y="1039.5" ></text>
</g>
<g >
<title>new_sync_read (1 samples, 0.11%)</title><rect x="43.6" y="885" width="1.3" height="15.0" fill="rgb(227,122,34)" rx="2" ry="2" />
<text  x="46.57" y="895.5" ></text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (13 samples, 1.42%)</title><rect x="25.5" y="293" width="16.8" height="15.0" fill="rgb(216,98,42)" rx="2" ry="2" />
<text  x="28.49" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.11%)</title><rect x="43.6" y="741" width="1.3" height="15.0" fill="rgb(207,181,13)" rx="2" ry="2" />
<text  x="46.57" y="751.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.33%)</title><rect x="28.1" y="85" width="3.8" height="15.0" fill="rgb(229,34,39)" rx="2" ry="2" />
<text  x="31.07" y="95.5" ></text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 2.08%)</title><rect x="17.7" y="693" width="24.6" height="15.0" fill="rgb(211,43,19)" rx="2" ry="2" />
<text  x="20.75" y="703.5" >&lt;..</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.11%)</title><rect x="22.9" y="277" width="1.3" height="15.0" fill="rgb(215,212,11)" rx="2" ry="2" />
<text  x="25.91" y="287.5" ></text>
</g>
<g >
<title>benchmark_area::main (3 samples, 0.33%)</title><rect x="11.3" y="1429" width="3.9" height="15.0" fill="rgb(226,41,44)" rx="2" ry="2" />
<text  x="14.29" y="1439.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="44.9" y="1013" width="1.2" height="15.0" fill="rgb(239,124,15)" rx="2" ry="2" />
<text  x="47.86" y="1023.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="933" width="1.3" height="15.0" fill="rgb(247,175,1)" rx="2" ry="2" />
<text  x="18.16" y="943.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.11%)</title><rect x="17.7" y="117" width="1.3" height="15.0" fill="rgb(216,155,30)" rx="2" ry="2" />
<text  x="20.75" y="127.5" ></text>
</g>
<g >
<title>benchmark_area (914 samples, 100.00%)</title><rect x="10.0" y="1461" width="1180.0" height="15.0" fill="rgb(229,46,32)" rx="2" ry="2" />
<text  x="13.00" y="1471.5" >benchmark_area</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="501" width="24.6" height="15.0" fill="rgb(207,120,50)" rx="2" ry="2" />
<text  x="20.75" y="511.5" >&lt;..</text>
</g>
<g >
<title>geojson::util::json_to_1d_positions (3 samples, 0.33%)</title><rect x="11.3" y="1109" width="3.9" height="15.0" fill="rgb(228,200,42)" rx="2" ry="2" />
<text  x="14.29" y="1119.5" ></text>
</g>
<g >
<title>geos::geom::Polygon::getArea (1 samples, 0.11%)</title><rect x="1187.4" y="1445" width="1.3" height="15.0" fill="rgb(220,154,52)" rx="2" ry="2" />
<text  x="1190.42" y="1455.5" ></text>
</g>
<g >
<title>harness::data::load_multipolygon_pack (24 samples, 2.63%)</title><rect x="15.2" y="1189" width="30.9" height="15.0" fill="rgb(231,150,7)" rx="2" ry="2" />
<text  x="18.16" y="1199.5" >ha..</text>
</g>
<g >
<title>benchmark_area::geo_area (100 samples, 10.94%)</title><rect x="46.1" y="1141" width="129.2" height="15.0" fill="rgb(224,72,35)" rx="2" ry="2" />
<text  x="49.15" y="1151.5" >benchmark_area::..</text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.33%)</title><rect x="28.1" y="37" width="3.8" height="15.0" fill="rgb(229,69,0)" rx="2" ry="2" />
<text  x="31.07" y="47.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;geos::geom::LinearRing, std::default_delete&lt;geos::geom::LinearRing&gt; &gt;::_M_ptr (1 samples, 0.11%)</title><rect x="1188.7" y="1445" width="1.3" height="15.0" fill="rgb(249,191,50)" rx="2" ry="2" />
<text  x="1191.71" y="1455.5" ></text>
</g>
<g >
<title>geozero::geojson::geojson_reader::process_linestring (1 samples, 0.11%)</title><rect x="42.3" y="1061" width="1.3" height="15.0" fill="rgb(219,84,28)" rx="2" ry="2" />
<text  x="45.28" y="1071.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.11%)</title><rect x="21.6" y="101" width="1.3" height="15.0" fill="rgb(247,47,37)" rx="2" ry="2" />
<text  x="24.62" y="111.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;geojson::geometry::Geometry&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1013" width="1.3" height="15.0" fill="rgb(207,205,2)" rx="2" ry="2" />
<text  x="18.16" y="1023.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.11%)</title><rect x="15.2" y="757" width="1.3" height="15.0" fill="rgb(230,152,53)" rx="2" ry="2" />
<text  x="18.16" y="767.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.22%)</title><rect x="20.3" y="133" width="2.6" height="15.0" fill="rgb(215,108,17)" rx="2" ry="2" />
<text  x="23.33" y="143.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.11%)</title><rect x="17.7" y="69" width="1.3" height="15.0" fill="rgb(227,64,32)" rx="2" ry="2" />
<text  x="20.75" y="79.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;geojson::geojson::GeoJson&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1125" width="1.3" height="15.0" fill="rgb(212,1,54)" rx="2" ry="2" />
<text  x="18.16" y="1135.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.11%)</title><rect x="46.1" y="1061" width="1.3" height="15.0" fill="rgb(252,114,52)" rx="2" ry="2" />
<text  x="49.15" y="1071.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.11%)</title><rect x="44.9" y="693" width="1.2" height="15.0" fill="rgb(238,154,32)" rx="2" ry="2" />
<text  x="47.86" y="703.5" ></text>
</g>
<g >
<title>pte_alloc_one (1 samples, 0.11%)</title><rect x="44.9" y="741" width="1.2" height="15.0" fill="rgb(247,224,14)" rx="2" ry="2" />
<text  x="47.86" y="751.5" ></text>
</g>
<g >
<title>__libc_start_main (882 samples, 96.50%)</title><rect x="15.2" y="1429" width="1138.7" height="15.0" fill="rgb(226,134,45)" rx="2" ry="2" />
<text  x="18.16" y="1439.5" >__libc_start_main</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.11%)</title><rect x="43.6" y="821" width="1.3" height="15.0" fill="rgb(212,36,49)" rx="2" ry="2" />
<text  x="46.57" y="831.5" ></text>
</g>
<g >
<title>std::abs (1 samples, 0.11%)</title><rect x="1143.5" y="1013" width="1.3" height="15.0" fill="rgb(238,139,22)" rx="2" ry="2" />
<text  x="1146.52" y="1023.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.11%)</title><rect x="17.7" y="133" width="1.3" height="15.0" fill="rgb(234,184,10)" rx="2" ry="2" />
<text  x="20.75" y="143.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.11%)</title><rect x="22.9" y="325" width="1.3" height="15.0" fill="rgb(233,97,21)" rx="2" ry="2" />
<text  x="25.91" y="335.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;f64&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="15.2" y="885" width="1.3" height="15.0" fill="rgb(226,41,19)" rx="2" ry="2" />
<text  x="18.16" y="895.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.55%)</title><rect x="25.5" y="229" width="6.4" height="15.0" fill="rgb(237,219,14)" rx="2" ry="2" />
<text  x="28.49" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.11%)</title><rect x="43.6" y="965" width="1.3" height="15.0" fill="rgb(229,156,31)" rx="2" ry="2" />
<text  x="46.57" y="975.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.33%)</title><rect x="11.3" y="1445" width="3.9" height="15.0" fill="rgb(223,31,4)" rx="2" ry="2" />
<text  x="14.29" y="1455.5" ></text>
</g>
<g >
<title>&lt;geojson::geojson::GeoJson as core::str::traits::FromStr&gt;::from_str (20 samples, 2.19%)</title><rect x="16.5" y="1109" width="25.8" height="15.0" fill="rgb(230,149,42)" rx="2" ry="2" />
<text  x="19.46" y="1119.5" >&lt;..</text>
</g>
<g >
<title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.11%)</title><rect x="38.4" y="85" width="1.3" height="15.0" fill="rgb(248,97,12)" rx="2" ry="2" />
<text  x="41.40" y="95.5" ></text>
</g>
<g >
<title>alloc::raw_vec::finish_grow (4 samples, 0.44%)</title><rect x="17.7" y="293" width="5.2" height="15.0" fill="rgb(217,15,1)" rx="2" ry="2" />
<text  x="20.75" y="303.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.11%)</title><rect x="43.6" y="693" width="1.3" height="15.0" fill="rgb(229,195,44)" rx="2" ry="2" />
<text  x="46.57" y="703.5" ></text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.11%)</title><rect x="39.7" y="197" width="1.3" height="15.0" fill="rgb(241,180,1)" rx="2" ry="2" />
<text  x="42.69" y="207.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 2.08%)</title><rect x="17.7" y="933" width="24.6" height="15.0" fill="rgb(215,211,8)" rx="2" ry="2" />
<text  x="20.75" y="943.5" >s..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.55%)</title><rect x="17.7" y="373" width="6.5" height="15.0" fill="rgb(243,84,48)" rx="2" ry="2" />
<text  x="20.75" y="383.5" ></text>
</g>
<g >
<title>geos::algorithm::Area::ofRingSigned (26 samples, 2.84%)</title><rect x="1153.9" y="1445" width="33.5" height="15.0" fill="rgb(221,181,46)" rx="2" ry="2" />
<text  x="1156.85" y="1455.5" >ge..</text>
</g>
<g >
<title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="15.2" y="773" width="1.3" height="15.0" fill="rgb(247,165,42)" rx="2" ry="2" />
<text  x="18.16" y="783.5" ></text>
</g>
<g >
<title>&lt;geozero::geo_types::geo_types_writer::GeoWriter as geozero::geometry_processor::GeomProcessor&gt;::xy (1 samples, 0.11%)</title><rect x="42.3" y="1029" width="1.3" height="15.0" fill="rgb(234,23,36)" rx="2" ry="2" />
<text  x="45.28" y="1039.5" ></text>
</g>
<g >
<title>std::io::read_to_end (2 samples, 0.22%)</title><rect x="43.6" y="1045" width="2.5" height="15.0" fill="rgb(230,55,36)" rx="2" ry="2" />
<text  x="46.57" y="1055.5" ></text>
</g>
<g >
<title>geozero::geojson::geojson_reader::read_geojson (24 samples, 2.63%)</title><rect x="15.2" y="1141" width="30.9" height="15.0" fill="rgb(214,21,19)" rx="2" ry="2" />
<text  x="18.16" y="1151.5" >ge..</text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.11%)</title><rect x="41.0" y="245" width="1.3" height="15.0" fill="rgb(244,86,8)" rx="2" ry="2" />
<text  x="43.98" y="255.5" ></text>
</g>
<g >
<title>&lt;geo_types::multi_polygon::MultiPolygon&lt;T&gt; as geo::algorithm::area::Area&lt;T&gt;&gt;::signed_area (100 samples, 10.94%)</title><rect x="46.1" y="1125" width="129.2" height="15.0" fill="rgb(209,211,7)" rx="2" ry="2" />
<text  x="49.15" y="1135.5" >&lt;geo_types::mult..</text>
</g>
<g >
<title>geos::algorithm::Area::ofRing (749 samples, 81.95%)</title><rect x="177.8" y="1029" width="967.0" height="15.0" fill="rgb(241,115,23)" rx="2" ry="2" />
<text  x="180.83" y="1039.5" >geos::algorithm::Area::ofRing</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;geojson::Feature&gt; (1 samples, 0.11%)</title><rect x="15.2" y="1045" width="1.3" height="15.0" fill="rgb(229,23,17)" rx="2" ry="2" />
<text  x="18.16" y="1055.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.11%)</title><rect x="21.6" y="69" width="1.3" height="15.0" fill="rgb(248,92,34)" rx="2" ry="2" />
<text  x="24.62" y="79.5" ></text>
</g>
<g >
<title>geojson::util::get_coords_3d_pos (3 samples, 0.33%)</title><rect x="11.3" y="1157" width="3.9" height="15.0" fill="rgb(206,198,36)" rx="2" ry="2" />
<text  x="14.29" y="1167.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (882 samples, 96.50%)</title><rect x="15.2" y="1349" width="1138.7" height="15.0" fill="rgb(214,56,36)" rx="2" ry="2" />
<text  x="18.16" y="1359.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="44.9" y="901" width="1.2" height="15.0" fill="rgb(241,157,11)" rx="2" ry="2" />
<text  x="47.86" y="911.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (1 samples, 0.11%)</title><rect x="43.6" y="997" width="1.3" height="15.0" fill="rgb(245,219,11)" rx="2" ry="2" />
<text  x="46.57" y="1007.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;geos::geom::LinearRing, std::default_delete&lt;geos::geom::LinearRing&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;geos::geom::LinearRing, std::default_delete&lt;geos::geom::LinearRing&gt; &gt; &gt; &gt;::begin (1 samples, 0.11%)</title><rect x="1151.3" y="1029" width="1.3" height="15.0" fill="rgb(213,180,25)" rx="2" ry="2" />
<text  x="1154.27" y="1039.5" ></text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19 samples, 2.08%)</title><rect x="17.7" y="901" width="24.6" height="15.0" fill="rgb(234,83,10)" rx="2" ry="2" />
<text  x="20.75" y="911.5" >&lt;..</text>
</g>
<g >
<title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19 samples, 2.08%)</title><rect x="17.7" y="581" width="24.6" height="15.0" fill="rgb(237,80,6)" rx="2" ry="2" />
<text  x="20.75" y="591.5" >&lt;..</text>
</g>
<g >
<title>serde::de::MapAccess::next_entry (19 samples, 2.08%)</title><rect x="17.7" y="789" width="24.6" height="15.0" fill="rgb(216,172,34)" rx="2" ry="2" />
<text  x="20.75" y="799.5" >s..</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.53%)</title><rect x="24.2" y="309" width="18.1" height="15.0" fill="rgb(220,27,23)" rx="2" ry="2" />
<text  x="27.20" y="319.5" ></text>
</g>
<g >
<title>&lt;geojson::geojson::GeoJson as core::convert::TryFrom&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt;::try_from (3 samples, 0.33%)</title><rect x="11.3" y="1301" width="3.9" height="15.0" fill="rgb(247,144,33)" rx="2" ry="2" />
<text  x="14.29" y="1311.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.22%)</title><rect x="20.3" y="149" width="2.6" height="15.0" fill="rgb(253,175,25)" rx="2" ry="2" />
<text  x="23.33" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="15.2" y="965" width="1.3" height="15.0" fill="rgb(224,86,18)" rx="2" ry="2" />
<text  x="18.16" y="975.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.11%)</title><rect x="46.1" y="1029" width="1.3" height="15.0" fill="rgb(236,115,47)" rx="2" ry="2" />
<text  x="49.15" y="1039.5" ></text>
</g>
<g >
<title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 1.53%)</title><rect x="24.2" y="325" width="18.1" height="15.0" fill="rgb(206,64,41)" rx="2" ry="2" />
<text  x="27.20" y="335.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.44%)</title><rect x="26.8" y="117" width="5.1" height="15.0" fill="rgb(221,5,42)" rx="2" ry="2" />
<text  x="29.78" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (5 samples, 0.55%)</title><rect x="25.5" y="181" width="6.4" height="15.0" fill="rgb(235,227,49)" rx="2" ry="2" />
<text  x="28.49" y="191.5" ></text>
</g>
<g >
<title>geojson::geojson::get_object (19 samples, 2.08%)</title><rect x="17.7" y="1093" width="24.6" height="15.0" fill="rgb(224,103,16)" rx="2" ry="2" />
<text  x="20.75" y="1103.5" >g..</text>
</g>
<g >
<title>std::rt::lang_start_internal (882 samples, 96.50%)</title><rect x="15.2" y="1397" width="1138.7" height="15.0" fill="rgb(211,127,11)" rx="2" ry="2" />
<text  x="18.16" y="1407.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.11%)</title><rect x="43.6" y="1013" width="1.3" height="15.0" fill="rgb(248,176,26)" rx="2" ry="2" />
<text  x="46.57" y="1023.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 2.08%)</title><rect x="17.7" y="709" width="24.6" height="15.0" fill="rgb(242,217,15)" rx="2" ry="2" />
<text  x="20.75" y="719.5" >&lt;..</text>
</g>
<g >
<title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 2.08%)</title><rect x="17.7" y="549" width="24.6" height="15.0" fill="rgb(243,193,14)" rx="2" ry="2" />
<text  x="20.75" y="559.5" >&lt;..</text>
</g>
<g >
<title>core::str::&lt;impl str&gt;::parse (20 samples, 2.19%)</title><rect x="16.5" y="1125" width="25.8" height="15.0" fill="rgb(230,58,1)" rx="2" ry="2" />
<text  x="19.46" y="1135.5" >c..</text>
</g>
<g >
<title>vfs_read (1 samples, 0.11%)</title><rect x="43.6" y="901" width="1.3" height="15.0" fill="rgb(240,145,2)" rx="2" ry="2" />
<text  x="46.57" y="911.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.11%)</title><rect x="21.6" y="117" width="1.3" height="15.0" fill="rgb(228,180,15)" rx="2" ry="2" />
<text  x="24.62" y="127.5" ></text>
</g>
<g >
<title>__GI___mremap (1 samples, 0.11%)</title><rect x="44.9" y="853" width="1.2" height="15.0" fill="rgb(245,208,19)" rx="2" ry="2" />
<text  x="47.86" y="863.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.11%)</title><rect x="16.5" y="885" width="1.2" height="15.0" fill="rgb(239,220,24)" rx="2" ry="2" />
<text  x="19.46" y="895.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.11%)</title><rect x="22.9" y="341" width="1.3" height="15.0" fill="rgb(244,106,23)" rx="2" ry="2" />
<text  x="25.91" y="351.5" ></text>
</g>
<g >
<title>harness::data::load_multipolygon_pack (3 samples, 0.33%)</title><rect x="11.3" y="1413" width="3.9" height="15.0" fill="rgb(240,83,10)" rx="2" ry="2" />
<text  x="14.29" y="1423.5" ></text>
</g>
<g >
<title>_int_realloc (4 samples, 0.44%)</title><rect x="17.7" y="213" width="5.2" height="15.0" fill="rgb(230,124,52)" rx="2" ry="2" />
<text  x="20.75" y="223.5" ></text>
</g>
<g >
<title>geojson::util::json_to_position (3 samples, 0.33%)</title><rect x="11.3" y="1093" width="3.9" height="15.0" fill="rgb(213,227,32)" rx="2" ry="2" />
<text  x="14.29" y="1103.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="44.9" y="933" width="1.2" height="15.0" fill="rgb(210,171,46)" rx="2" ry="2" />
<text  x="47.86" y="943.5" ></text>
</g>
<g >
<title>&lt;geo_types::point::Point&lt;T&gt; as geo::algorithm::map_coords::MapCoords&lt;T,NT&gt;&gt;::map_coords (19 samples, 2.08%)</title><rect x="112.0" y="1013" width="24.5" height="15.0" fill="rgb(232,160,1)" rx="2" ry="2" />
<text  x="114.99" y="1023.5" >&lt;..</text>
</g>
<g >
<title>serde::de::SeqAccess::next_element (8 samples, 0.88%)</title><rect x="31.9" y="277" width="10.4" height="15.0" fill="rgb(210,69,15)" rx="2" ry="2" />
<text  x="34.95" y="287.5" ></text>
</g>
</g>
</svg>
